<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jarvanmo&#39;s Blog</title>
  
  
  <link href="https://jarvanmo.github.io/atom.xml" rel="self"/>
  
  <link href="https://jarvanmo.github.io/"/>
  <updated>2025-03-01T13:50:37.871Z</updated>
  <id>https://jarvanmo.github.io/</id>
  
  <author>
    <name>Jarvanmo</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Flutter插件中引用本地framework</title>
    <link href="https://jarvanmo.github.io/post/22ac6568.html"/>
    <id>https://jarvanmo.github.io/post/22ac6568.html</id>
    <published>2025-03-01T13:25:10.857Z</published>
    <updated>2025-03-01T13:50:37.871Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近搞了搞Flutter plugin，发现iOS端已经默认使用SPM了，但是SPM目前也比较少，而我拿到的Framework又是纯本地的，不需要发布到远程仓库，但始终无法正确添加。本身不是什么难题，只是因为我不太了解SPM。</p><p>如果有误，望指正。</p><h2 id="framework转成-xcframework"><a href="#framework转成-xcframework" class="headerlink" title=".framework转成.xcframework"></a>.framework转成.xcframework</h2><p>由于对方给我的是一堆<code>.framework</code>文件，而SPM不支持<code>.framework</code>，所以要先把<code>.framework</code>变成<code>.xcframework</code>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">xcodebuild -create-xcframework -output SampleFramework.xcframework -framework path/to/a.framework -framework path/to/b.framework </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>完成之后你会得到一个<code>Sample.xcframework</code>.</p><h2 id="集成xcframework"><a href="#集成xcframework" class="headerlink" title="集成xcframework"></a>集成xcframework</h2><p>假设你的插件名字叫作<code>plugin_name</code>，并且你要集成的<code>xcframework</code>名字叫作<code>SampleFramework.xcframework</code>。</p><p>首先，把<code>xcframework</code>复制到<code>ios/plugin_name</code>。然后找<code>Package.swift</code>, 然后把<code>SampleFramework.xcframework</code>添加进去。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> PackageDescription</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="keyword">package</span> <span class="operator">=</span> <span class="type">Package</span>(</span><br><span class="line">    name: <span class="string">&quot;plugin_name&quot;</span>,</span><br><span class="line">    platforms: [</span><br><span class="line">        .iOS(<span class="string">&quot;12.0&quot;</span>)</span><br><span class="line">    ],</span><br><span class="line">    products: [</span><br><span class="line">        .library(name: <span class="string">&quot;plugin_name&quot;</span>, targets: [<span class="string">&quot;plugin_name&quot;</span>,<span class="string">&quot;SampleFramework&quot;</span>]) <span class="comment">// 这里添加你的framework名称</span></span><br><span class="line">    ],</span><br><span class="line">    dependencies: [</span><br><span class="line">        .package(path: <span class="string">&quot;Sources/plugin_name/SampleFramework.xcframework&quot;</span>) <span class="comment">// 这里添加你的framework</span></span><br><span class="line">    ],</span><br><span class="line">    targets: [</span><br><span class="line">        .target(</span><br><span class="line">            name: <span class="string">&quot;plugin_name&quot;</span>,</span><br><span class="line">            dependencies: [</span><br><span class="line">                .byName(name: <span class="string">&quot;SampleFramework&quot;</span>) <span class="comment">// 这里添加你的framework</span></span><br><span class="line">            ],</span><br><span class="line">            resources: []</span><br><span class="line">            </span><br><span class="line">        ),</span><br><span class="line">        </span><br><span class="line">        .binaryTarget(name: <span class="string">&quot;SampleFramework&quot;</span>, path: <span class="string">&quot;SampleFramework.xcframework&quot;</span>) <span class="comment">//这里添加你的framework</span></span><br><span class="line"></span><br><span class="line">    ]</span><br><span class="line">)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;最近搞了搞Flutter plugin，发现iOS端已经默认使用SPM了，但是SPM目前也比较少，而我拿到的Framework又是纯本地的，</summary>
      
    
    
    
    <category term="Flutter" scheme="https://jarvanmo.github.io/categories/Flutter/"/>
    
    
    <category term="Flutter" scheme="https://jarvanmo.github.io/tags/Flutter/"/>
    
    <category term="SPM" scheme="https://jarvanmo.github.io/tags/SPM/"/>
    
  </entry>
  
  <entry>
    <title>为什么Compose可以嵌套？</title>
    <link href="https://jarvanmo.github.io/post/132ede47.html"/>
    <id>https://jarvanmo.github.io/post/132ede47.html</id>
    <published>2024-12-20T12:49:58.670Z</published>
    <updated>2024-12-22T00:04:03.401Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>问题：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">为什么Compose可以无限嵌套而传统的xml却不可以？</span><br></pre></td></tr></table></figure><p>要搞清楚这个问题首先还是得先了解二者绘制的差异，我说的可能不对，如果有问题，欢迎大家指出。</p><h2 id="xml"><a href="#xml" class="headerlink" title="xml"></a>xml</h2><p>以前我们用传统的xml绘制布局的时候都是要尽量减少布局的层级关系，以提升性能，因为层级的增加，会大幅拖慢界面的加载。这种拖慢的主要原因在于各种Layout的重复测量。尽管从客观上来说重复测量都布局来说是必不可少的，但它也确实使页面的加载时间随着页面层级的增加而产生了指数级的增长。一个ViewGroup对子view的测量可能是二次，三次甚至多次测量。对于一个会二次测量的系统来说，它的每个View的测量算法的时间复杂度是O(2^n)，其中n是View的层级深度。当然了，这只是一个粗略的估计，因为不是第个View都会进行2次测量，也有会进行三次甚至多次测量。一句话说是就是，这种测量方式会导致View的层级每加深一级，它的加载时间就会翻一倍。</p><h2 id="Compose"><a href="#Compose" class="headerlink" title="Compose"></a>Compose</h2><p>Compose可以无限套娃的原理也很简单，那就是禁止二次测量。如果每个组件对每个子组件只测量一次，那它的时间复杂度则降低到了O(n)。</p><h2 id="为什么Compose可以禁止二次测量"><a href="#为什么Compose可以禁止二次测量" class="headerlink" title="为什么Compose可以禁止二次测量"></a>为什么Compose可以禁止二次测量</h2><p>既然禁止二次测量可以极大提升View的布局效率，那为什么传统的View不直接禁掉？因为有用呗。既然有用，那Compose就不用了吗？因为Compose引入一个新的概念——Intrinsic Measurement，官方翻译叫固有特性测量。所谓的固有特性测量就是Compose允许父组件在对子组件进行正测测量之前，先测量一下这个子组件的“固有尺寸”，换大白话说就是，子组件内容的最大或者最小尺寸是多少，这其实就先进行这种粗略的测量，然后再进行最终的正式测量。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;问题：&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutt</summary>
      
    
    
    
    <category term="Android" scheme="https://jarvanmo.github.io/categories/Android/"/>
    
    
    <category term="面试题" scheme="https://jarvanmo.github.io/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>Broadcast和LocalBroadcast有什么区别</title>
    <link href="https://jarvanmo.github.io/post/7095dbdd.html"/>
    <id>https://jarvanmo.github.io/post/7095dbdd.html</id>
    <published>2024-12-16T06:18:40.510Z</published>
    <updated>2024-12-16T06:36:40.170Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>最近面试的时候，面试官问了我一个问题：Broadcast和LocalBroadcast有什么区别？说实话，我已经很多年没有用过广播了，突然一问，确实很是生疏，我当时的回答是Broadcast一般是用来跨进程通信的，比如接受一些系统广播，而LocalBroadcast则是应用内通信的。今天正好有时间好好梳理一下。</p><h2 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h2><p>首先，二者在机制上就不一样：</p><ul><li>Broadcast是基于Binder的，可以用进行跨进程间的通信，如应用与应用，系统和应用的通信，当然应用内部通信也是可以的。</li><li>LocalBroadcast则是基于Handler的，利用了IntentFilter的match功能，仅可以用来进程内部通信</li></ul><p>其次，二者的使用方式也不同：</p><ul><li>Broadcast是支持静态注册和动态注册的，即可以在Manifest里注册也可以在代码中注册</li><li>LocalBroadcast只能动态注册</li></ul><p>然而，Android 8.0之后限制了绝大部分广播只能使用动态注册。</p><h2 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h2><p><code>Broadcast</code>可以进行跨进程通信，<code>LocalBroadcast</code>仅可以进行进程内通信，效率更高，也更为安全。</p><h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h2><p>现在还有多人在用<code>LocalBroadcast</code>?</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;最近面试的时候，面试官问了我一个问题：Broadcast和LocalBroadcast有什么区别？说实话，我已经很多年没有用过广播了，突然一</summary>
      
    
    
    
    <category term="Android" scheme="https://jarvanmo.github.io/categories/Android/"/>
    
    
    <category term="面试题" scheme="https://jarvanmo.github.io/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>浅扒Android动态设置字体大小</title>
    <link href="https://jarvanmo.github.io/post/bb488c43.html"/>
    <id>https://jarvanmo.github.io/post/bb488c43.html</id>
    <published>2024-12-16T02:33:06.320Z</published>
    <updated>2024-12-16T06:17:04.955Z</updated>
    
    <content type="html"><![CDATA[<h3 id="说点废话"><a href="#说点废话" class="headerlink" title="说点废话"></a>说点废话</h3><p>Android开发中,TextView类的控件应该说是很常用了。一般来说我们是通过<code> android:textSize=&quot;20sp&quot;</code><br>来设置字体大小，但是很多时候也需要动态设置字体大小，调用也很简单:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">textView.setTextSize(textSize);</span><br></pre></td></tr></table></figure><p>为了适配各种各样的型号，我们一般会将字体大小定义到<code>dimens.xml</code>之中：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dimen</span> <span class="attr">name</span>=<span class="string">&quot;text_size&quot;</span>&gt;</span>16sp<span class="tag">&lt;/<span class="name">dimen</span>&gt;</span></span><br></pre></td></tr></table></figure><p> 然后在<code>java</code>代码中设置定义好的字体大小：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">float</span> <span class="variable">dimen</span> <span class="operator">=</span> getResources().getDimension(R.dimen.text_size);</span><br><span class="line">textView.setTextSize(dimen);</span><br></pre></td></tr></table></figure><p>满心欢喜的运行一下，看一效果，结果发现字体奇大无比！！！远非16sp！！！难道不应该通过<code>getDimension()</code>取值吗？通过<code>logcat</code>我发现，在<code>Nexus 6p</code>并且<code>&lt;dimen name=&quot;text_size&quot;&gt;16sp&lt;/dimen&gt;</code>下，在通过<code>getDimension(R.dimen.text_size)</code>得到返回值是<code>56.0</code>!<br>实际上，在<code>java</code>代码中取在<code>dimens.xml</code>中定义的值一共有三种:</p><ul><li>getDimension()</li><li>getDimensionPixelOffset()</li><li>getDimensionPixelSize()</li></ul><p>看到这三个函数的名称时，还是会有点不知所云。本着“不求甚解，遍历式开发”的原则，我把这三种方式都试了一遍，结果发现字体大小没一个是对的，这就诡异了。难道这里有平行宇宙？至此，我只能翻出我的英汉大词典，让我们去探寻一下<code>docs</code>吧。</p><h3 id="getDimension"><a href="#getDimension" class="headerlink" title="getDimension()"></a>getDimension()</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Retrieve a dimensional for a particular resource ID.  Unit </span></span><br><span class="line"><span class="comment"> * conversions are based on the current &#123;<span class="doctag">@link</span> DisplayMetrics&#125; associated</span></span><br><span class="line"><span class="comment"> * with the resources.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> id The desired resource identifier, as generated by the aapt</span></span><br><span class="line"><span class="comment"> *           tool. This integer encodes the package, type, and resource</span></span><br><span class="line"><span class="comment"> *           entry. The value 0 is an invalid identifier.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> Resource dimension value multiplied by the appropriate </span></span><br><span class="line"><span class="comment"> * metric.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">float</span> <span class="title function_">getDimension</span><span class="params">(<span class="meta">@DimenRes</span> <span class="type">int</span> id)</span> <span class="keyword">throws</span> NotFoundException &#123;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过注释我们不难发现，<code>getDimension()</code>是根据指定id获取一个基于当前<code>DisplayMetrics</code>的值。这个值究竟是什么也没有说，只知道是<code>float</code>，并且单位转换是基于当前资源的，但肯定不是像素，如果是像素应该是int。</p><h3 id="getDimensionPixelSize"><a href="#getDimensionPixelSize" class="headerlink" title="getDimensionPixelSize"></a>getDimensionPixelSize</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * Retrieve a dimensional for a particular resource ID for use</span></span><br><span class="line"><span class="comment">  * as a size in raw pixels.  This is the same as</span></span><br><span class="line"><span class="comment">  * &#123;<span class="doctag">@link</span> #getDimension&#125;, except the returned value is converted to</span></span><br><span class="line"><span class="comment">  * integer pixels for use as a size.  A size conversion involves</span></span><br><span class="line"><span class="comment">  * rounding the base value, and ensuring that a non-zero base value</span></span><br><span class="line"><span class="comment">  * is at least one pixel in size.</span></span><br><span class="line"><span class="comment">  * </span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> id The desired resource identifier, as generated by the aapt</span></span><br><span class="line"><span class="comment">  *           tool. This integer encodes the package, type, and resource</span></span><br><span class="line"><span class="comment">  *           entry. The value 0 is an invalid identifier.</span></span><br><span class="line"><span class="comment">  * </span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span> Resource dimension value multiplied by the appropriate </span></span><br><span class="line"><span class="comment">  * metric and truncated to integer pixels.</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getDimensionPixelSize</span><span class="params">(<span class="meta">@DimenRes</span> <span class="type">int</span> id)</span> <span class="keyword">throws</span> NotFoundException &#123;</span><br><span class="line"> </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p><code>getDimensionPixelSize()</code>的功能与<code>getDimension()</code>类似，不同的是将结果转换为int，并且小数部分四舍五入，这个结果将作为尺寸。<code>getDimensionPixelSize()</code>进行了尺寸转换，这个转换实际是上四舍五入的结果，并且保证返回值是一个至少是1像素的非零数值。</p><p>###getDimensionPixelOffset()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Retrieve a dimensional for a particular resource ID for use</span></span><br><span class="line"><span class="comment"> * as an offset in raw pixels.  This is the same as</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> #getDimension&#125;, except the returned value is converted to</span></span><br><span class="line"><span class="comment"> * integer pixels for you.  An offset conversion involves simply</span></span><br><span class="line"><span class="comment"> * truncating the base value to an integer.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> id The desired resource identifier, as generated by the aapt</span></span><br><span class="line"><span class="comment"> *           tool. This integer encodes the package, type, and resource</span></span><br><span class="line"><span class="comment"> *           entry. The value 0 is an invalid identifier.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> Resource dimension value multiplied by the appropriate </span></span><br><span class="line"><span class="comment"> * metric and truncated to integer pixels.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getDimensionPixelOffset</span><span class="params">(<span class="meta">@DimenRes</span> <span class="type">int</span> id)</span> <span class="keyword">throws</span> NotFoundException &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>getDimensionPixelOffset()</code>与<code>getDimension()</code>功能类似，不同的是将结果转换为int，这个结果将用作原始像素的偏移量。偏移转换（offset conversion，函数命名中的offset是这个意思）的作用之一是将基础值简单地截短为整数，注意直接截断小数位，即取整（其实就是把float强制转化为int，注意不是四舍五入）。</p><h3 id="阶段性总结"><a href="#阶段性总结" class="headerlink" title="阶段性总结"></a>阶段性总结</h3><p>由此可见，这三个函数返回的都是绝对尺寸，而不是相对尺寸（dp\sp等）。如果getDimension()返回结果是30.5f，那么getDimensionPixelSize()返回结果就是31，getDimensionPixelOffset()返回结果就是30。<br>至此，应该说<code>getDimensionPixelSize(), getDimension(), getDimensionPixelOffset()</code>我们已经大致有所了解了，但是如果想更深入了解一下，就需要深入源码以验证上述解释。</p><h3 id="扒源码"><a href="#扒源码" class="headerlink" title="扒源码"></a>扒源码</h3><p>深入源码，我们可以发现其实这三个函数的实现大同小异，以<code>getDimension()</code>为例:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">float</span> <span class="title function_">getDimension</span><span class="params">(<span class="meta">@DimenRes</span> <span class="type">int</span> id)</span> <span class="keyword">throws</span> NotFoundException &#123;</span><br><span class="line">      <span class="keyword">final</span> <span class="type">TypedValue</span> <span class="variable">value</span> <span class="operator">=</span> obtainTempTypedValue();</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="keyword">final</span> <span class="type">ResourcesImpl</span> <span class="variable">impl</span> <span class="operator">=</span> mResourcesImpl;</span><br><span class="line">          impl.getValue(id, value, <span class="literal">true</span>);</span><br><span class="line">          <span class="keyword">if</span> (value.type == TypedValue.TYPE_DIMENSION) &#123;</span><br><span class="line">              <span class="keyword">return</span> TypedValue.complexToDimension(value.data, impl.getDisplayMetrics());</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NotFoundException</span>(<span class="string">&quot;Resource ID #0x&quot;</span> + Integer.toHexString(id)</span><br><span class="line">                  + <span class="string">&quot; type #0x&quot;</span> + Integer.toHexString(value.type) + <span class="string">&quot; is not valid&quot;</span>);</span><br><span class="line">      &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">          releaseTempTypedValue(value);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>类<code>TypedValue</code>是动态类型数据的容器，其主要用于盛放<code>Resources</code>的值。上述代码第7行就是根据id获取<code>TypedValue```的值，</code>getDimension()<code>、```getDimensionPixelOffset()</code>和<code>getDimensionPixelSize()</code>函数体唯一的不同就是第7行：</p><ul><li><code>getDimension()</code>调用的是<code>TypedValue</code>的<code>complexToDimension()</code>方法</li><li><code>getDimensionPixelSize</code>调用的是<code>TypedValue</code>的<code>complexToDimensionPixelSize()</code>方法</li><li><code>getDimensionPixelOffset</code>调用的是<code>TypedValue</code>的<code>complexToDimensionPixelOffset()</code>方法</li></ul><p>顺藤摸瓜，我们继续深入<code>ypedValue</code>，查看<code>complexToDimension()</code>、<code>complexToDimensionPixelSize()</code>和<code>complexToDimensionPixelOffset(）</code>函数的区别，会发现这三个函数体内容依旧大同小异，以<code>complexToDimension()</code>为例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">float</span> <span class="title function_">complexToDimension</span><span class="params">(<span class="type">int</span> data, DisplayMetrics metrics)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> applyDimension(</span><br><span class="line">        (data&gt;&gt;COMPLEX_UNIT_SHIFT)&amp;COMPLEX_UNIT_MASK,</span><br><span class="line">        complexToFloat(data),</span><br><span class="line">        metrics);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>complexToDimensionPixelOffset()</code>与<code>complexToDimension()</code>不同的是将结果进行了强转，实际上相当直接截断小数部分；</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">### applyDimension()</span><br><span class="line">各位看官，源码已经看到了这里，是否已感觉很无趣?但`applyDimension()`的实现已经脱光了在等着你呢：</span><br><span class="line">```java</span><br><span class="line">public static float applyDimension(int unit, float value,DisplayMetrics metrics)  &#123;</span><br><span class="line">        switch (unit) &#123;</span><br><span class="line">        case COMPLEX_UNIT_PX:</span><br><span class="line">            return value;</span><br><span class="line">        case COMPLEX_UNIT_DIP:</span><br><span class="line">            return value * metrics.density;</span><br><span class="line">        case COMPLEX_UNIT_SP:</span><br><span class="line">            return value * metrics.scaledDensity;</span><br><span class="line">        case COMPLEX_UNIT_PT:</span><br><span class="line">            return value * metrics.xdpi * (1.0f/72);</span><br><span class="line">        case COMPLEX_UNIT_IN:</span><br><span class="line">            return value * metrics.xdpi;</span><br><span class="line">        case COMPLEX_UNIT_MM:</span><br><span class="line">            return value * metrics.xdpi * (1.0f/25.4f);</span><br><span class="line">        &#125;</span><br><span class="line">        return 0;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>在上述代码中，我们发现在<code>applyDimension()</code>中根据单位的不同，将<code>float</code>乘上不同的系数。如dip&#x2F;dp需乘上屏幕系数，sp则需乘上字号的缩放系数，pt、in、mm等也是根据相应的算法进行换算（从COMPLEX_UNIT_PX直接返回float可以看出，该方法是将数值转成像素数）。</p><p>###再次总结<br>通过上述探索，我们不难发现，在Adroid并没有在<code>java</code>代码中直接获取<code>dimens.xml</code>中定义的dp(dip)&#x2F;sp的值的API，只有<code>getDimension()</code>、<code>getDimensionPixelOffset()</code>和<code>getDimensionPixelSize()</code>这个三个方法来获取绝对尺寸。但有时候我们确实需要动态获取<code>dimen.xml</code>中的值，并为TextView设置字体大小。而这种方法直接应用在<code>textView.setTextSize(dimen);</code>都是有问题的。那我们将从<code>TextView</code>入手,寻找一个正确的姿势来设置字体大小。<br>###setTextSize()<br>首先把代码端上来：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setTextSize</span><span class="params">(<span class="type">float</span> size)</span> &#123;</span><br><span class="line">      setTextSize(TypedValue.COMPLEX_UNIT_SP, size);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>原来<code>setTextSize(float)</code>调用了他的重载方法<code>setTextSize(int,float)</code>，并且第一个参数传的默认值是<code>TypedValue.COMPLEX_UNIT_SP </code>，眼熟吗，没错就是之前提到的。那么，我们继续看看一下<code>setTextSize(int,float)</code>做了什么：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setTextSize</span><span class="params">(<span class="type">int</span> unit, <span class="type">float</span> size)</span> &#123;</span><br><span class="line">     <span class="keyword">if</span> (!isAutoSizeEnabled()) &#123;</span><br><span class="line">         setTextSizeInternal(unit, size, <span class="literal">true</span> <span class="comment">/* shouldRequestLayout */</span>);</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>很显然是调用了<code>setTextSizeInternal(unit, size, true /* shouldRequestLayout */);</code>。看到这累不，不过看都看了就再看看呗，说不定比苍老师好看：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">setTextSizeInternal</span><span class="params">(<span class="type">int</span> unit, <span class="type">float</span> size, <span class="type">boolean</span> shouldRequestLayout)</span> &#123;</span><br><span class="line">    <span class="type">Context</span> <span class="variable">c</span> <span class="operator">=</span> getContext();</span><br><span class="line">    Resources r;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (c == <span class="literal">null</span>) &#123;</span><br><span class="line">        r = Resources.getSystem();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        r = c.getResources();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    setRawTextSize(TypedValue.applyDimension(unit, size, r.getDisplayMetrics()),shouldRequestLayout);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>高能！！！*TypedValue.applyDimension(unit, size, r.getDisplayMetrics())*是不是很眼熟？？？还记得<code>applyDimension(）</code>是怎么处理数据的吗？</p><ul><li>我们发现在<code>applyDimension()</code>中根据单位的不同，将<code>float</code>乘上不同的系数。如dip&#x2F;dp需乘上屏幕系数，sp则需乘上字号的缩放系数，pt、in、mm等也是根据相应的算法进行换算（从COMPLEX_UNIT_PX直接返回float可以看出，该方法是将数值转成像素数）</li></ul><p>综上，<code>setTextSize(float)</code>给传的值的单位其实是SP，但通过<code>getDimension()</code>取的值却不是这样的。为了证实默认单位是SP，各位看官可以直接传个16，看看和16sp是不是一样的。所以问题是不得到了解决？</p><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>Android中并不提供直接从<code>dimens.xml</code>获取dp&#x2F;sp数值的方法，通过<code>getDimensionPixelSize()</code> <code>getDimension()</code> <code>getDimensionPixelOffset()</code>获取的值是经过处理的。所以正确地动态设置<code>TextView</code>字体大小的姿势应该是：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">dimen</span> <span class="operator">=</span> getResources().getDimensionPixelSize(R.dimen.text_size);</span><br><span class="line">textView.setTextSize(TypedValue.COMPLEX_UNIT_PX，dimen);</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;说点废话&quot;&gt;&lt;a href=&quot;#说点废话&quot; class=&quot;headerlink&quot; title=&quot;说点废话&quot;&gt;&lt;/a&gt;说点废话&lt;/h3&gt;&lt;p&gt;Android开发中,TextView类的控件应该说是很常用了。一般来说我们是通过&lt;code&gt; android:textSi</summary>
      
    
    
    
    <category term="Android" scheme="https://jarvanmo.github.io/categories/Android/"/>
    
    
    <category term="Android" scheme="https://jarvanmo.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>如何在Linux终端中将socks5转为http</title>
    <link href="https://jarvanmo.github.io/post/7095dbdd.html"/>
    <id>https://jarvanmo.github.io/post/7095dbdd.html</id>
    <published>2024-12-06T13:40:14.766Z</published>
    <updated>2024-12-06T13:48:21.712Z</updated>
    
    <content type="html"><![CDATA[<p>最近又开始在家折腾了一下Ubuntu，奈何打开Github都费劲，更别说往Github上提&#x2F;拉代码了。但是我只有socks5的服务，在终端下也难以科学上网，直接export_http也不好用，想起了多年我用一个叫的Privoxy的工具可以将socks5流量转换为http，实现终端科学上网。当然，我不知道是否有更优解，如果有欢迎告诉我呀。</p><h2 id="安装Privoxy"><a href="#安装Privoxy" class="headerlink" title="安装Privoxy"></a>安装Privoxy</h2><p>就那么安装呗</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install install privoxy</span><br></pre></td></tr></table></figure><h2 id="配置Privoxy"><a href="#配置Privoxy" class="headerlink" title="配置Privoxy"></a>配置Privoxy</h2><p>用你喜欢的方式打开privoxy的配置文件<code>/etc/privoxy/config</code>，并注释掉下面的一句话：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">listen-address  127.0.0.1:8118</span><br></pre></td></tr></table></figure><p>也就是这样的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># listen-address  127.0.0.1:8118</span><br></pre></td></tr></table></figure><p>也可能是长成这样的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">listen-address  localhost:8118</span><br></pre></td></tr></table></figure><p>最后在文件的末尾追回两行代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">forward-socks5 / 127.0.0.1:1080 .</span><br><span class="line">listen-address 127.0.0.1:8118</span><br></pre></td></tr></table></figure><h2 id="启动Privoxy"><a href="#启动Privoxy" class="headerlink" title="启动Privoxy"></a>启动Privoxy</h2><p>保存上述文件之后，记得启动一下Privoxy:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service privoxy restart</span><br></pre></td></tr></table></figure><p>这样就完成了sock5到http代理的映射</p><h2 id="使用代理"><a href="#使用代理" class="headerlink" title="使用代理"></a>使用代理</h2><p>打开终端，输入下面两行命令即可实现当前终端科学上网:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export http_proxy=http://127.0.0.1:8118</span><br><span class="line">export https_proxy=http://127.0.0.1:8118</span><br></pre></td></tr></table></figure><p>当然，如果你想一劳永逸，可以给他加到类似<code>etc/environment</code>这样的地方。</p><h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h2><p>我想说，当个码农真不容易</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;最近又开始在家折腾了一下Ubuntu，奈何打开Github都费劲，更别说往Github上提&amp;#x2F;拉代码了。但是我只有socks5的服务，在终端下也难以科学上网，直接export_http也不好用，想起了多年我用一个叫的Privoxy的工具可以将socks5流量转换为h</summary>
      
    
    
    
    <category term="其他" scheme="https://jarvanmo.github.io/categories/%E5%85%B6%E4%BB%96/"/>
    
    
    <category term="Socks5" scheme="https://jarvanmo.github.io/tags/Socks5/"/>
    
    <category term="科学上网" scheme="https://jarvanmo.github.io/tags/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/"/>
    
  </entry>
  
  <entry>
    <title>简单谈谈dart中几种Map的不同</title>
    <link href="https://jarvanmo.github.io/post/585a8a85.html"/>
    <id>https://jarvanmo.github.io/post/585a8a85.html</id>
    <published>2024-12-06T13:39:22.745Z</published>
    <updated>2024-12-06T13:39:22.745Z</updated>
    
    <content type="html"><![CDATA[<p>Dart有几种内置集合(Collections)，比如<code>Set</code>,<code>List</code>以及<code>Map</code>。了解他们在实现上的优点与缺点有助于你去如何使用他们。</p><blockquote><p>本文是在Dart 2.1.1下演示的。如有错误，敬请指正。</p></blockquote><h2 id="什么是Map"><a href="#什么是Map" class="headerlink" title="什么是Map"></a>什么是Map</h2><p>Map是一个关联容器，将键映射到值。 键是唯一的，可以指向一个且只能指向一个值，但值是可以重复的。 键不能为<code>null</code>，但值可以为<code>null</code>。</p><h2 id="Map字面量"><a href="#Map字面量" class="headerlink" title="Map字面量"></a>Map字面量</h2><p>Dart是支持<a href="https://www.dartlang.org/guides/language/language-tour#maps">Map字面量</a>的，因此可以通过下面的方式创建一个Map对象：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> gifts = &#123;</span><br><span class="line">  <span class="comment">// Key:    Value</span></span><br><span class="line">  <span class="string">&#x27;first&#x27;</span>: <span class="string">&#x27;partridge&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;second&#x27;</span>: <span class="string">&#x27;turtledoves&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;fifth&#x27;</span>: <span class="string">&#x27;golden rings&#x27;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>规范中提到Map字面量必须保持插入顺序。 这意味着<code>gifts</code>是<code>LinkedHashMap</code>的实例。我们来验证下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(&quot;type of gifts:$&#123;gifts.runtimeType&#125;&quot;);</span><br><span class="line">//type of gifts:_InternalLinkedHashMap&lt;String, String&gt;</span><br></pre></td></tr></table></figure><h2 id="new-Map"><a href="#new-Map" class="headerlink" title="new Map()"></a>new Map()</h2><p>Dart支持工厂构造函数，因此我们也可以像这样创建Map：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var gifts= new Map();</span><br></pre></td></tr></table></figure><blockquote><p>从Dart2开始,new是可选的。不再提。</p></blockquote><p>然而<code>Map</code>却是抽象类，这意味着上面的代码实际上是由Map的子类创建的实例。 那么<code>gifts</code>的类型到底是什么？同样地，我们来打印一下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> print(&quot;type of gifts:$&#123;gifts.runtimeType&#125;&quot;);</span><br><span class="line">// type of gifts:_InternalLinkedHashMap&lt;dynamic, dynamic&gt;</span><br></pre></td></tr></table></figure><p>实际上，在早期版本的Dart 中，<code>new Map()</code>实际上是创建了一个<code>HashMap</code>。 但是， <a href="http://code.google.com/p/dart/issues/detail?id=5803">Dart bug 5803</a>中有提到为了使<code>&#123;&#125;</code>和<code>new Map()</code>返回相同的类型，<code>new Map</code>将很快返回<code>LinkedHashMap</code>的实例。</p><h2 id="LinkedHashMap"><a href="#LinkedHashMap" class="headerlink" title="LinkedHashMap"></a>LinkedHashMap</h2><p><code>LinkedHashMap</code>是有序的，它会按照插入顺序进行迭代键：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var ordered = new LinkedHashMap();</span><br><span class="line">  ordered[&#x27;32352&#x27;] = &#x27;Alice&#x27;;</span><br><span class="line">  ordered[&#x27;95594&#x27;] = &#x27;Bob&#x27;;</span><br><span class="line"></span><br><span class="line">  for (var key in ordered.keys) &#123;</span><br><span class="line">    print(key);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   // 一定是先打印 32352, 然后打印95594</span><br></pre></td></tr></table></figure><p>如果改变一个key的值并不会改变key的插入顺序，但如果是先删除再添加就会改变插入顺序：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">var ordered = new LinkedHashMap();</span><br><span class="line">  ordered[&#x27;32352&#x27;] = &#x27;Alice&#x27;;</span><br><span class="line">  ordered[&#x27;95594&#x27;] = &#x27;Bob&#x27;;</span><br><span class="line">  ordered[&#x27;45684&#x27;] = &#x27;Kal&#x27;;</span><br><span class="line"></span><br><span class="line">  for (var key in ordered.keys) &#123;</span><br><span class="line">    print(&quot;仅遍历：$key&quot;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  ordered[&#x27;95594&#x27;] = &#x27;James&#x27;;</span><br><span class="line">  for (var key in ordered.keys) &#123;</span><br><span class="line">    print(&quot;改变一个值：$key&quot;);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  ordered.remove(&#x27;95594&#x27;);</span><br><span class="line">  ordered[&#x27;95594&#x27;] = &#x27;Kobe&#x27;;</span><br><span class="line">  for (var key in ordered.keys) &#123;</span><br><span class="line">    print(&quot;改变一个值：$key&quot;);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>输出如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">仅遍历：32352</span><br><span class="line">仅遍历：95594</span><br><span class="line">仅遍历：45684</span><br><span class="line">改变一个值：32352</span><br><span class="line">改变一个值：95594</span><br><span class="line">改变一个值：45684</span><br><span class="line">删除后再添加：32352</span><br><span class="line">删除后再添加：45684</span><br><span class="line">删除后再添加：95594</span><br></pre></td></tr></table></figure><h2 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h2><p><code>HashMap</code>并不会保证维护数据的插入顺序。当去遍历<code>HashMap</code>时，键值对的顺序是无法得到保证的。<br>可以通过如下方式创建<code>HashMap</code>：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;dart:collection&#x27;</span>;</span><br><span class="line">main() &#123;</span><br><span class="line">  <span class="keyword">var</span> gifts= <span class="keyword">new</span> HashMap();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当你并不关心键值对的顺序的时候可以使用<code>HashMap</code>。<br> <a href="http://code.google.com/p/dart/source/browse/trunk/dart/sdk/lib/collection/hash_map.dart"> HashMap的源码在此</a>。</p><h2 id="SplayTreeMap"><a href="#SplayTreeMap" class="headerlink" title="SplayTreeMap"></a>SplayTreeMap</h2><p>伸展树（分裂树）是一种自平衡二叉搜索树，它具有可以可以快速访问最近被访问的元素。它能在O(log n)内完成插入、查找和删除操作。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;dart:collection&#x27;</span>;</span><br><span class="line">main() &#123;</span><br><span class="line">  <span class="keyword">var</span> gifts= <span class="keyword">new</span> SplayTreeMap();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>SplayTreeMap要求所有的键都是同一类型的,:</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> splayTreeMap = SplayTreeMap();</span><br><span class="line">splayTreeMap[<span class="string">&quot;1&quot;</span>] = <span class="string">&quot;s&quot;</span>;</span><br><span class="line">splayTreeMap[<span class="number">1</span>] = <span class="string">&quot;2&quot;</span>;</span><br></pre></td></tr></table></figure><p>上面的代码语法是没问题的，但运行时是不允许的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">type &#x27;int&#x27; is not a subtype of type &#x27;String&#x27; of &#x27;other&#x27;</span><br></pre></td></tr></table></figure><p>对于经常存储和访问的数据（如缓存），<code>SplayTreeMap</code>是一个不错的选择。 原因是他们使用树旋转将一个元素调到根，以便更频繁地访问。 性能来自树的自我优化。 也就是说，频繁访问的元素移动到更靠近顶部。 但是，如果同时经常访问树，那么使用<code>SplayTreeMap</code>几乎没有意义。</p><p>举个例子，调制解调器路由器以非常高的速率接收网络数据包。 调制解调器必须决定哪个数据包进入哪个线路。 这可以使用map实现，其中键是IP，值是目标线路。 对于这种情况，<code>SplayTreeMap</code>是一个不错的选择，因为大多数IP地址将被多次使用，因此可以从树的根目录找到它们。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Dart有几种内置集合(Collections)，比如&lt;code&gt;Set&lt;/code&gt;,&lt;code&gt;List&lt;/code&gt;以及&lt;code&gt;Map&lt;/code&gt;。了解他们在实现上的优点与缺点有助于你去如何使用他们。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;本文是在Dart 2</summary>
      
    
    
    
    <category term="Flutter &amp; Dart" scheme="https://jarvanmo.github.io/categories/Flutter-Dart/"/>
    
    
    <category term="Flutter" scheme="https://jarvanmo.github.io/tags/Flutter/"/>
    
    <category term="Dart" scheme="https://jarvanmo.github.io/tags/Dart/"/>
    
  </entry>
  
  <entry>
    <title>欢迎来到我的博客</title>
    <link href="https://jarvanmo.github.io/post/b250e9bb.html"/>
    <id>https://jarvanmo.github.io/post/b250e9bb.html</id>
    <published>2024-11-29T07:11:33.857Z</published>
    <updated>2024-11-29T07:24:08.434Z</updated>
    
    <content type="html"><![CDATA[<h2 id="欢迎来到我的博客"><a href="#欢迎来到我的博客" class="headerlink" title="欢迎来到我的博客"></a>欢迎来到我的博客</h2><p>终于弄好了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;欢迎来到我的博客&quot;&gt;&lt;a href=&quot;#欢迎来到我的博客&quot; class=&quot;headerlink&quot; title=&quot;欢迎来到我的博客&quot;&gt;&lt;/a&gt;欢迎来到我的博客&lt;/h2&gt;&lt;p&gt;终于弄好了。&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
</feed>
